from typing import * 

class Solution:
    def sampleStats(self, count: List[int]) -> List[float]:
        # minimum, maximum, mean, median, mode
        mn, mx = None, 0
        total = 0 
        cnt = 0 
        mode = 0 
        mode_cnt = 0 
        n = len(count)
        prefix = [0]*(n+1) 
        for i in range(n): 
            prefix[i+1] = prefix[i]+count[i]
            if count[i] == 0:
                continue 
            total += count[i]*i 
            cnt += count[i]
            if mn is None:  
                mn = i
            if i > mx: 
                mx = i
            if count[i] > mode_cnt: 
                mode_cnt = count[i]
                mode = i  
        mean = total/cnt 
                
        def search(target):
            l, r = 0, n-1 
            while l <= r: 
                mid = (r-l)//2+l 
                if prefix[mid] < target: 
                    l = mid+1 
                else: 
                    r = mid-1 
            return l 
        
        k = cnt//2 + 1 
        l = search(k)
        m1 = m2 = 0 
        m = prefix[l-1]
        for i in range(l-1, -1, -1): 
            if count[i] == 0: 
                continue 
            # NOTE, prefix[l] >= k, but prefix[l-1] can be < k
            # so use m+1 != k here 
            if cnt%2 == 1 or m+1 != k: 
                m1 = i
                m2 = i  
                break
            if m+1 == k:
                # eg, k is 5 and m is 4, then m1, m2 are different  
                if m1 == 0: 
                    m1 = i 
                else: 
                    m2 = i 
                    break 
        median = (m1+m2)/2 

        return [mn, mx, mean, median, mode]
    
if __name__ == "__main__": 
    s = Solution() 
    
    count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    assert s.sampleStats(count) == [1.00000,3.00000,2.37500,2.50000,3.00000]
            
    # count = [264,912,1416,1903,2515,3080,3598,4099,4757,5270,5748,6451,7074,7367,7847,8653,9318,9601,10481,10787,11563,11869,12278,12939,13737,13909,14621,15264,15833,16562,17135,17491,17982,18731,19127,19579,20524,20941,21347,21800,22342,21567,21063,20683,20204,19818,19351,18971,18496,17974,17677,17034,16701,16223,15671,15167,14718,14552,14061,13448,13199,12539,12265,11912,10931,10947,10516,10177,9582,9102,8699,8091,7864,7330,6915,6492,6013,5513,5140,4701,4111,3725,3321,2947,2357,1988,1535,1124,664,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]     
    # assert s.sampleStats(count) == [0.0,89.0,42.82683,42.0,40.0]   